# THIS FILE IS AUTO-GENERATED BY ini2py.
# DO NOT EDIT THIS FILE MANUALLY.

from configparser import SectionProxy
import os

class ConfigSchema:
    """
    配置架構類，用於處理配置文件的特定區段。

    提供方法來返回屬性名稱和值，並支援敏感信息的遮罩處理。
    """
    def __init__(self, config_section: SectionProxy) -> None:
        """
        初始化 ConfigSchema 實例。

        參數：
            config_section (SectionProxy): 配置文件中的特定區段。
        """
        self._config_section = config_section
        
    def return_properties(self, return_type="list", mask_sensitive=True):
        """
        返回所有 @property 方法的名稱和對應的值。

        參數：
            return_type (str): 指定返回格式，'list' 返回列表，'dict' 返回字典。
            mask_sensitive (bool): 是否對敏感信息進行隱藏處理。

        返回：
            list 或 dict: 包含 @property 名稱和值的列表或字典。
        """
        if return_type == "dict":
            payload = {}
        elif return_type == "list":
            payload = []
        else:
            raise ValueError("Invalid return_type. Must be 'list' or 'dict'.")

        sensitive_keywords = [
            "password", "pwd", "api_token", "token", "appkey", "secret", "key",
        ]

        def mask_value(value):
            """
            對敏感值進行遮罩處理。

            參數：
                value: 要遮罩的值。

            返回：
                str: 遮罩後的值。
            """
            value_str = str(value)
            if len(value_str) > 4:
                return value_str[:2] + "*" * (len(value_str) - 4) + value_str[-2:]
            return value

        for attr_name in dir(self):
            attr = getattr(self.__class__, attr_name, None)
            if isinstance(attr, property):
                try:
                    value = getattr(self, attr_name)
                    if mask_sensitive and any(
                        keyword.lower() in attr_name.lower()
                        for keyword in sensitive_keywords
                    ):
                        value = mask_value(value)
                except Exception as e:
                    # 替換 f-string 為字串連接
                    value = "<Error: " + str(e) + ">"

                if return_type == "dict":
                    payload[attr_name] = value
                elif return_type == "list":
                    # 替換 f-string 為字串連接
                    payload.append(str(attr_name) + ": " + str(value))

        return payload


# ---------- GENERATED CLASSES START ----------
class DefaultSchema(ConfigSchema):
    """[default]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def asr_engine(self):
        return self._config_section.get('asr_engine')
    @property
    def preprocessors(self):
        return self._config_section.get('preprocessors')
    @property
    def log_level(self):
        return self._config_section.get('log_level')

class AsrWhisperSchema(ConfigSchema):
    """[asr_whisper]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def model_size(self):
        return self._config_section.get('model_size')
    @property
    def device(self):
        return self._config_section.get('device')
    @property
    def language(self):
        return self._config_section.get('language')
    @property
    def task(self):
        return self._config_section.get('task')
    @property
    def fp16(self):
        return self._config_section.getboolean('fp16')

class AsrFunasrSchema(ConfigSchema):
    """[asr_funasr]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def model_path(self):
        return self._config_section.get('model_path')
    @property
    def device(self):
        return self._config_section.get('device')

class AsrVoskSchema(ConfigSchema):
    """[asr_vosk]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def model_path(self):
        return self._config_section.get('model_path')
    @property
    def language_code(self):
        return self._config_section.get('language_code')

class AsrGoogleApiSchema(ConfigSchema):
    """[asr_google_api]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def api_key(self):
        return self._config_section.get('api_key')
    @property
    def language_code(self):
        return self._config_section.get('language_code')
    @property
    def region(self):
        return self._config_section.get('region')

class AsrMicrosoftApiSchema(ConfigSchema):
    """[asr_microsoft_api]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def api_key(self):
        return self._config_section.get('api_key')
    @property
    def language_code(self):
        return self._config_section.get('language_code')
    @property
    def region(self):
        return self._config_section.get('region')

class AsrOpenaiApiSchema(ConfigSchema):
    """[asr_openai_api]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def api_key(self):
        return self._config_section.get('api_key')
    @property
    def model(self):
        return self._config_section.get('model')

class PreprocessorNoiseReductionSchema(ConfigSchema):
    """[preprocessor_noise_reduction]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def enabled(self):
        return self._config_section.getboolean('enabled')
    @property
    def strength(self):
        return self._config_section.getfloat('strength')
    @property
    def sample_rate(self):
        return self._config_section.getint('sample_rate')
    @property
    def frame_length(self):
        return self._config_section.getint('frame_length')
    @property
    def hop_length(self):
        return self._config_section.getint('hop_length')

class PreprocessorAudioNormalizerSchema(ConfigSchema):
    """[preprocessor_audio_normalizer]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def target_sample_rate(self):
        return self._config_section.getint('target_sample_rate')
    @property
    def target_channels(self):
        return self._config_section.getint('target_channels')
    @property
    def normalize_volume(self):
        return self._config_section.getboolean('normalize_volume')
    @property
    def target_volume(self):
        return self._config_section.getfloat('target_volume')

class PreprocessorVoiceEnhancementSchema(ConfigSchema):
    """[preprocessor_voice_enhancement]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def enabled(self):
        return self._config_section.getboolean('enabled')
    @property
    def gain_db(self):
        return self._config_section.getfloat('gain_db')

class AudioInputCaptureSchema(ConfigSchema):
    """[audio_input_capture]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def device_index(self):
        return self._config_section.getint('device_index')
    @property
    def sample_rate(self):
        return self._config_section.getint('sample_rate')
    @property
    def channels(self):
        return self._config_section.getint('channels')
    @property
    def frames_per_buffer(self):
        return self._config_section.getint('frames_per_buffer')
    @property
    def max_retries(self):
        return self._config_section.getint('max_retries')
    @property
    def retry_interval(self):
        return self._config_section.getint('retry_interval')

class RedisSchema(ConfigSchema):
    """[redis]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def host(self):
        return self._config_section.get('host')
    @property
    def port(self):
        return self._config_section.getint('port')
    @property
    def db(self):
        return self._config_section.getint('db')
    @property
    def password(self):
        return self._config_section.get('password')

class RestApiSchema(ConfigSchema):
    """[rest_api]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def host(self):
        return self._config_section.get('host')
    @property
    def port(self):
        return self._config_section.getint('port')
    @property
    def debug(self):
        return self._config_section.getboolean('debug')
# ---------- GENERATED CLASSES END ----------